// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.5.0 (commit 0712d3bfbd159367de09efeeeacb54c9d4f0ff61).

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
} from "spacetimedb";

// Import and reexport all reducer arg types
import { CreateGroupchat } from "./create_groupchat_reducer.ts";
export { CreateGroupchat };
import { IdentityConnected } from "./identity_connected_reducer.ts";
export { IdentityConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { JoinGroupchat } from "./join_groupchat_reducer.ts";
export { JoinGroupchat };
import { SendMessage } from "./send_message_reducer.ts";
export { SendMessage };
import { SetName } from "./set_name_reducer.ts";
export { SetName };

// Import and reexport all table handle types
import { GroupchatTableHandle } from "./groupchat_table.ts";
export { GroupchatTableHandle };
import { GroupchatMembershipTableHandle } from "./groupchat_membership_table.ts";
export { GroupchatMembershipTableHandle };
import { MessageTableHandle } from "./message_table.ts";
export { MessageTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };

// Import and reexport all types
import { GroupChat } from "./group_chat_type.ts";
export { GroupChat };
import { GroupChatMembership } from "./group_chat_membership_type.ts";
export { GroupChatMembership };
import { Message } from "./message_type.ts";
export { Message };
import { User } from "./user_type.ts";
export { User };

const REMOTE_MODULE = {
  tables: {
    groupchat: {
      tableName: "groupchat",
      rowType: GroupChat.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (GroupChat.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    groupchat_membership: {
      tableName: "groupchat_membership",
      rowType: GroupChatMembership.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (GroupChatMembership.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    message: {
      tableName: "message",
      rowType: Message.getTypeScriptAlgebraicType(),
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: (User.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    create_groupchat: {
      reducerName: "create_groupchat",
      argsType: CreateGroupchat.getTypeScriptAlgebraicType(),
    },
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    join_groupchat: {
      reducerName: "join_groupchat",
      argsType: JoinGroupchat.getTypeScriptAlgebraicType(),
    },
    send_message: {
      reducerName: "send_message",
      argsType: SendMessage.getTypeScriptAlgebraicType(),
    },
    set_name: {
      reducerName: "set_name",
      argsType: SetName.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.5.0",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: __DbConnectionImpl, event: __Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: __DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: __DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "CreateGroupchat", args: CreateGroupchat }
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "JoinGroupchat", args: JoinGroupchat }
| { name: "SendMessage", args: SendMessage }
| { name: "SetName", args: SetName }
;

export class RemoteReducers {
  constructor(private connection: __DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  createGroupchat(name: string) {
    const __args = { name };
    let __writer = new __BinaryWriter(1024);
    CreateGroupchat.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("create_groupchat", __argsBuffer, this.setCallReducerFlags.createGroupchatFlags);
  }

  onCreateGroupchat(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("create_groupchat", callback);
  }

  removeOnCreateGroupchat(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("create_groupchat", callback);
  }

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  joinGroupchat(groupchat: string) {
    const __args = { groupchat };
    let __writer = new __BinaryWriter(1024);
    JoinGroupchat.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("join_groupchat", __argsBuffer, this.setCallReducerFlags.joinGroupchatFlags);
  }

  onJoinGroupchat(callback: (ctx: ReducerEventContext, groupchat: string) => void) {
    this.connection.onReducer("join_groupchat", callback);
  }

  removeOnJoinGroupchat(callback: (ctx: ReducerEventContext, groupchat: string) => void) {
    this.connection.offReducer("join_groupchat", callback);
  }

  sendMessage(text: string) {
    const __args = { text };
    let __writer = new __BinaryWriter(1024);
    SendMessage.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("send_message", __argsBuffer, this.setCallReducerFlags.sendMessageFlags);
  }

  onSendMessage(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.onReducer("send_message", callback);
  }

  removeOnSendMessage(callback: (ctx: ReducerEventContext, text: string) => void) {
    this.connection.offReducer("send_message", callback);
  }

  setName(name: string) {
    const __args = { name };
    let __writer = new __BinaryWriter(1024);
    SetName.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_name", __argsBuffer, this.setCallReducerFlags.setNameFlags);
  }

  onSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("set_name", callback);
  }

  removeOnSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("set_name", callback);
  }

}

export class SetReducerFlags {
  createGroupchatFlags: __CallReducerFlags = 'FullUpdate';
  createGroupchat(flags: __CallReducerFlags) {
    this.createGroupchatFlags = flags;
  }

  joinGroupchatFlags: __CallReducerFlags = 'FullUpdate';
  joinGroupchat(flags: __CallReducerFlags) {
    this.joinGroupchatFlags = flags;
  }

  sendMessageFlags: __CallReducerFlags = 'FullUpdate';
  sendMessage(flags: __CallReducerFlags) {
    this.sendMessageFlags = flags;
  }

  setNameFlags: __CallReducerFlags = 'FullUpdate';
  setName(flags: __CallReducerFlags) {
    this.setNameFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: __DbConnectionImpl) {}

  get groupchat(): GroupchatTableHandle {
    // clientCache is a private property
    return new GroupchatTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<GroupChat>(REMOTE_MODULE.tables.groupchat));
  }

  get groupchatMembership(): GroupchatMembershipTableHandle {
    // clientCache is a private property
    return new GroupchatMembershipTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<GroupChatMembership>(REMOTE_MODULE.tables.groupchat_membership));
  }

  get message(): MessageTableHandle {
    // clientCache is a private property
    return new MessageTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Message>(REMOTE_MODULE.tables.message));
  }

  get user(): UserTableHandle {
    // clientCache is a private property
    return new UserTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }
}

export class SubscriptionBuilder extends __SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends __DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: __DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = __EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = __ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = __SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = __ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
